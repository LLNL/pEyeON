# Run workflow for both push and MR triggers, but avoid duplicate pipeline runs
# workflow:
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#     - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
#       when: never
#     - if: '$CI_COMMIT_BRANCH'

include:
  #  - template: Jobs/Container-Scanning.gitlab-ci.yml # template for trivy scan
  - project: 'lc-templates/id_tokens'
    file: 'id_tokens.yml'

stages:
  - build
  - test
#   - sbom

.oslic:
  tags:
    - shell
    - oslic

before_script:
  - python3 -m venv eye  # Create venv
  - source eye/bin/activate
  - pip3 install build

build:
  stage: build
  extends:
    - .oslic
  script:
    - python3 -m build
  artifacts:
    paths:
      - dist/


container_scanning:  # Build project deps, download and install trivy, then scans filesystem
  stage: test
  extends:
    - .oslic
  dependencies:
    - build
  variables:
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  script:
    - pip install dist/eyeon-*.whl
    - pip freeze > requirements.txt  # this is the needed format for trivy to pick up dependencies

    # Install trivy, using this guide: https://aquasecurity.github.io/trivy/v0.53/tutorials/integrations/gitlab-ci/
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz" -O - | tar -zxvf -
    - ls -la

    - ./trivy --version        
    # Build and save report
    - time ./trivy filesystem --timeout=10m --exit-code 0 --format template --template "@./contrib/gitlab.tpl" -o gl-container-scanning-report.json .
    # Print full report
    - time ./trivy filesystem --exit-code 0 .
    # Fail on critical vulnerabilities
    - time ./trivy filesystem --exit-code 1 --severity CRITICAL .

    # Testing SBOM Generation
    - time ./trivy filesystem --format cyclonedx --output gl-sbom-eyeon.json .

  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ integration with security dashboard 
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
      cyclonedx: gl-sbom-eyeon.json


unittest:
  stage: test
  extends:
    - .oslic
  # image: python:3.10
  script:
    - ls
    - pip install dist/eyeon-*.whl
    - cd tests/
    - coverage run --source eyeon -m unittest testObserveRemote.py testParse.py testCli.py testChecksum.py
    - coverage xml
    - coverage html
    - coverage report --precision=2
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  dependencies:
    - build
  artifacts:
    paths:
      - 'tests/htmlcov/'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: 'tests/coverage.xml'

# sbom:  # put in artifacts instead
#   stage: sbom
#   script:
#     - cd .. # back to eyeon folder
#     - ./sbom-tool generate -b / -bc src/ -pn lsbom -pv 0.2 -ps "Lawrence Livermore National Laboratory" -nsb https://www.llnl.gov/
